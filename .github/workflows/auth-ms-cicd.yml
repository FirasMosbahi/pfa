name: auth-ms Pipeline

on:
  push:
    paths:
      - 'auth-ms/**'
      - '.github/workflows/auth-ms-cicd.yml'
      

jobs:
  vulnerability-check:
    runs-on: ubuntu-latest  
    steps:
      - uses: actions/checkout@v3 
        
      - name: Setup Go environment
        uses: actions/setup-go@v3
        with:
          go-version: 1.22.3
      
      - name: Install dependencies
        run: cd auth-ms && go mod tidy

      - name: Get official govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest
        shell: bash

      - name: Run govulncheck
        run: cd auth-ms && govulncheck -show verbose .
        shell: bash    
        
      - name: Get golangci-lint
        run: |
          curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s v1.59.0
          chmod +x ./bin/golangci-lint
        shell: bash

      - name: Run Static Test
        run: cd auth-ms && ../bin/golangci-lint run 
          
  build:
    needs: vulnerability-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3 
      - name: Add environment variables
        run: |
          cd auth-ms && touch .env && echo 'MONGODB_URI=${{secrets.DB_HOST}}' >> .env && echo 'JWT_SECRET=${{secrets.JWT_SECRET}}' >> .env && echo 'DB_NAME=${{secrets.DB_NAME}}' >> .env && cat .env
      - name: Build
        run: cd auth-ms && go build -o auth-ms-build .
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: auth-ms  
  
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: auth-ms-build   
      - name: Test
        run: |
          cd auth-ms-build
          if ! go test; then
            echo "Tests failed, stopping workflow."
            exit 1
          fi

      - name: Upload code coverage report to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Check Codecov report for errors
        run: |
          if [ -f codecov.txt ]; then
            if grep -q 'error' codecov.txt; then
              echo "Error found in Codecov report, stopping workflow."
              exit 1
            fi
          fi
  
  build-and-deliver-docker-image:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code 
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build image
        run: cd auth-ms && docker build -t auth-ms:latest .

      - name: Container Security Scanning
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image auth-ms:latest
          if [ $? -ne 0 ]; then
            echo "Security vulnerabilities found, stopping workflow."
            exit 1
          fi
        
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: pfaacr.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Tag Docker image
        run: |
          docker tag auth-ms:latest pfaacr.azurecr.io/auth-ms:latest

      - name: Push Docker image to ACR
        run: |
          docker push pfaacr.azurecr.io/auth-ms:latest 

  login-to-azure:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: OIDC Login to Azure Public Cloud with AzPowershell (enableAzPSSession true)
        uses: azure/login@v1
        with:
          client-id: "5aa379ac-a7fd-40c3-acb9-6d524f4991c4"
          tenant-id: "dbd6664d-4eb9-46eb-99d8-5c43ba153c61"
          subscription-id: "0cd54a1c-7281-4a32-8fb5-b3782d51ebf7"
          enable-AzPSSession: true

      - name: 'Get resource group with PowerShell action'
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Get-AzResourceGroup
          azPSVersion: "latest"        
