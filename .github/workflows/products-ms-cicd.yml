name: product-ms-pipeline

on:
  push:
    paths:
      - 'products-ms/**'
      - '.github/workflows/products-ms-cicd.yml'

jobs:

  check-vulnerability:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Dependency Vulnerability Scanning
        run: |
          cd products-ms
          npm audit --json > npm-audit.json
          cat npm-audit.json
          if [ -s npm-audit.json ]; then
            if [ $(jq '.vulnerabilities' < npm-audit.json) != '{}' ]; then
              jq -r '.advisories[] | "Vulnerability ID: \(.id)\nSeverity: \(.severity)\nTitle: \(.title)\nDescription: \(.overview)\n\n"' < npm-audit.json
              echo "Vulnerabilities found, stopping workflow."
              exit 1
            else
              echo "No vulnerabilities found."
            fi
            else
              echo "npm-audit.json is empty."
            fi      

  build:
    runs-on: ubuntu-latest
    needs: check-vulnerability

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          cd products-ms
          npm install

      - name: build
        run: cd products-ms && npm run build    

      - name: preprocess build artifact
        run : rm -d products-ms/node_modules

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: products-ms 

  tests:
    needs: build         
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: build-artifact
      - name: post process artifact
        run: cd build-artifact && npm i  
      - name: Run tests
        env:
          JWT_SECRET: ${{secrets.JWT_SECRET}}
          DB_HOST: ${{secrets.DB_HOST}}/${{secrets.DB_NAME}}
          PORT: ${{secrets.PRODUCT_MS_PORT}}
        run: |
          cd build-artifact
          if ! npm test; then
            echo "Tests failed, stopping workflow."
            exit 1
          fi
          
      - name: Upload code coverage report to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Check Codecov report for errors
        run: |
          if [ -f codecov.txt ]; then
            if grep -q 'error' codecov.txt; then
              echo "Error found in Codecov report, stopping workflow."
              exit 1
            fi
          fi


  build-docker-image:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifact

      - name: Build Docker image
        run: |
          docker build -t products-ms:latest .

      - name: Container Security Scanning
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image products-ms:latest
          if [ $? -ne 0 ]; then
            echo "Security vulnerabilities found, stopping workflow."
            exit 1
          fi

      - name: Login to Azure Container Registry ACR
        uses: azure/docker-login@v1
        with:
          login-server: pfaacr.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Tag Docker image
        run: |
          docker tag products-ms:latest pfaacr.azurecr.io/products-ms:latest

      - name: Push Docker image to ACR
        run: |
          docker push pfaacr.azurecr.io/products-ms:latest

#  terraform-apply:
#    runs-on: ubuntu-latest
#    steps:
#      - name: checkout code
#        uses: actions/checkout@v3
#
#      - name: Azure login
#        uses: azure/login@v2
#        with:
#          auth-type: IDENTITY
#          client-id: ${{ secrets.AZURE_CLIENT_ID }}
#          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
#          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
#          enable-AzPSSession: true
#          
#      - name: Install Terraform
#        run: |
#          curl -fsSL https://apt.releases.hashicorp.com/gpg | apt-key add -
#          apt-add repository ppa:hashicorp/terraform
#          apt-get update && apt-get install -y terraform
#                     
#      - name: Apply Terraform configuration
#        run: |
#          cd terraform
#          terraform init
#          terraform apply -auto-approve
                  